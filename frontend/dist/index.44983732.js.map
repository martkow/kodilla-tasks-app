{"mappings":"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","sources":["src/script.js"],"sourcesContent":["$(document).ready(function() {\n    const apiRoot = 'http://localhost:8080/v1/tasks';\n    const trelloApiRoot = 'http://localhost:8080/v1/trello';\n    const datatableRowTemplate = $('[data-datatable-row-template]').children()[0];\n    const $tasksContainer = $('[data-tasks-container]');\n\n    var availableBoards = {};\n    var availableTasks = {};\n\n    // init\n\n    getAllTasks();\n\n    function getAllAvailableBoards(callback, callbackArgs) {\n        var requestUrl = trelloApiRoot + '/boards';\n\n        $.ajax({\n            url: requestUrl,\n            method: 'GET',\n            contentType: 'application/json',\n            success: function(boards) { callback(callbackArgs, boards); }\n        });\n    }\n\n    function createElement(data) {\n        const element = $(datatableRowTemplate).clone();\n\n        element.attr('data-task-id', data.id);\n        element.find('[data-task-name-section] [data-task-name-paragraph]').text(data.title);\n        element.find('[data-task-name-section] [data-task-name-input]').val(data.title);\n\n        element.find('[data-task-content-section] [data-task-content-paragraph]').text(data.content);\n        element.find('[data-task-content-section] [data-task-content-input]').val(data.content);\n\n        return element;\n    }\n\n    function prepareBoardOrListSelectOptions(availableChoices) {\n        return availableChoices.map(function(choice) {\n            return $('<option>')\n                .addClass('crud-select__option')\n                .val(choice.id)\n                .text(choice.name || 'Unknown name');\n        });\n    }\n\n    function handleDatatableRender(taskData, boards) {\n        $tasksContainer.empty();\n        boards.forEach(board => {\n            availableBoards[board.id] = board;\n        });\n\n        taskData.forEach(function(task) {\n            var $datatableRowEl = createElement(task);\n            var $availableBoardsOptionElements = prepareBoardOrListSelectOptions(boards);\n\n            $datatableRowEl.find('[data-board-name-select]')\n                .append($availableBoardsOptionElements);\n\n            $datatableRowEl\n                .appendTo($tasksContainer);\n        });\n    }\n\n    function getAllTasks() {\n        const requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl,\n            method: 'GET',\n            contentType: \"application/json\",\n            success: function(tasks) {\n                tasks.forEach(task => {\n                    availableTasks[task.id] = task;\n                });\n\n                getAllAvailableBoards(handleDatatableRender, tasks);\n            }\n        });\n    }\n\n    function handleTaskUpdateRequest() {\n        var parentEl = $(this).parents('[data-task-id]');\n        var taskId = parentEl.attr('data-task-id');\n        var taskTitle = parentEl.find('[data-task-name-input]').val();\n        var taskContent = parentEl.find('[data-task-content-input]').val();\n        var requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl,\n            method: \"PUT\",\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: JSON.stringify({\n                id: taskId,\n                title: taskTitle,\n                content: taskContent\n            }),\n            success: function(data) {\n                parentEl.attr('data-task-id', data.id).toggleClass('datatable__row--editing');\n                parentEl.find('[data-task-name-paragraph]').text(taskTitle);\n                parentEl.find('[data-task-content-paragraph]').text(taskContent);\n            }\n        });\n    }\n\n    function handleTaskDeleteRequest() {\n        var parentEl = $(this).parents('[data-task-id]');\n        var taskId = parentEl.attr('data-task-id');\n        var requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl + '/' + taskId,\n            method: 'DELETE',\n            success: function() {\n                parentEl.slideUp(400, function() { parentEl.remove(); });\n            }\n        })\n    }\n\n    function handleTaskSubmitRequest(event) {\n        event.preventDefault();\n\n        var taskTitle = $(this).find('[name=\"title\"]').val();\n        var taskContent = $(this).find('[name=\"content\"]').val();\n\n        var requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl,\n            method: 'POST',\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: JSON.stringify({\n                title: taskTitle,\n                content: taskContent\n            }),\n            complete: function(data) {\n                if (data.status === 200) {\n                    getAllTasks();\n                }\n            }\n        });\n    }\n\n    function toggleEditingState() {\n        var parentEl = $(this).parents('[data-task-id]');\n        parentEl.toggleClass('datatable__row--editing');\n\n        var taskTitle = parentEl.find('[data-task-name-paragraph]').text();\n        var taskContent = parentEl.find('[data-task-content-paragraph]').text();\n\n        parentEl.find('[data-task-name-input]').val(taskTitle);\n        parentEl.find('[data-task-content-input]').val(taskContent);\n    }\n\n    function handleBoardNameSelect(event) {\n        var $changedSelectEl = $(event.target);\n        var selectedBoardId = $changedSelectEl.val();\n        var $listNameSelectEl = $changedSelectEl.siblings('[data-list-name-select]');\n        var preparedListOptions = prepareBoardOrListSelectOptions(availableBoards[selectedBoardId].lists);\n\n        $listNameSelectEl.empty().append(preparedListOptions);\n    }\n\n    function handleCardCreationRequest(event) {\n        var requestUrl = trelloApiRoot + '/cards';\n        var $relatedTaskRow = $(event.target).parents('[data-task-id]');\n        var relatedTaskId = $relatedTaskRow.attr('data-task-id');\n        var relatedTask = availableTasks[relatedTaskId];\n        var selectedListId = $relatedTaskRow.find('[data-list-name-select]').val();\n\n        if (!selectedListId) {\n            alert('You have to select a board and a list first!');\n            return;\n        }\n\n        $.ajax({\n            url: requestUrl,\n            method: 'POST',\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: JSON.stringify({\n                name: relatedTask.title,\n                description: relatedTask.content,\n                listId: selectedListId\n            }),\n            success: function(data) {\n                console.log('Card created - ' + data.shortUrl);\n                alert('Card created - ' + data.shortUrl);\n            }\n        });\n    }\n\n    $('[data-task-add-form]').on('submit', handleTaskSubmitRequest);\n\n    $tasksContainer.on('change','[data-board-name-select]', handleBoardNameSelect);\n    $tasksContainer.on('click','[data-trello-card-creation-trigger]', handleCardCreationRequest);\n    $tasksContainer.on('click','[data-task-edit-button]', toggleEditingState);\n    $tasksContainer.on('click','[data-task-edit-abort-button]', toggleEditingState);\n    $tasksContainer.on('click','[data-task-submit-update-button]', handleTaskUpdateRequest);\n    $tasksContainer.on('click','[data-task-delete-button]', handleTaskDeleteRequest);\n});"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}