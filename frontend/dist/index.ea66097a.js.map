{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["$(document).ready(function() {\n    const apiRoot = \"http://localhost:8080/v1/tasks\";\n    const trelloApiRoot = \"http://localhost:8080/v1/trello\";\n    const datatableRowTemplate = $(\"[data-datatable-row-template]\").children()[0];\n    const $tasksContainer = $(\"[data-tasks-container]\");\n    var availableBoards = {};\n    var availableTasks = {};\n    // init\n    getAllTasks();\n    function getAllAvailableBoards(callback, callbackArgs) {\n        var requestUrl = trelloApiRoot + \"/boards\";\n        $.ajax({\n            url: requestUrl,\n            method: \"GET\",\n            contentType: \"application/json\",\n            success: function(boards) {\n                callback(callbackArgs, boards);\n            }\n        });\n    }\n    function createElement(data) {\n        const element = $(datatableRowTemplate).clone();\n        element.attr(\"data-task-id\", data.id);\n        element.find(\"[data-task-name-section] [data-task-name-paragraph]\").text(data.title);\n        element.find(\"[data-task-name-section] [data-task-name-input]\").val(data.title);\n        element.find(\"[data-task-content-section] [data-task-content-paragraph]\").text(data.content);\n        element.find(\"[data-task-content-section] [data-task-content-input]\").val(data.content);\n        return element;\n    }\n    function prepareBoardOrListSelectOptions(availableChoices) {\n        return availableChoices.map(function(choice) {\n            return $(\"<option>\").addClass(\"crud-select__option\").val(choice.id).text(choice.name || \"Unknown name\");\n        });\n    }\n    function handleDatatableRender(taskData, boards) {\n        $tasksContainer.empty();\n        boards.forEach((board)=>{\n            availableBoards[board.id] = board;\n        });\n        taskData.forEach(function(task) {\n            var $datatableRowEl = createElement(task);\n            var $availableBoardsOptionElements = prepareBoardOrListSelectOptions(boards);\n            $datatableRowEl.find(\"[data-board-name-select]\").append($availableBoardsOptionElements);\n            $datatableRowEl.appendTo($tasksContainer);\n        });\n    }\n    function getAllTasks() {\n        const requestUrl = apiRoot;\n        $.ajax({\n            url: requestUrl,\n            method: \"GET\",\n            contentType: \"application/json\",\n            success: function(tasks) {\n                tasks.forEach((task)=>{\n                    availableTasks[task.id] = task;\n                });\n                getAllAvailableBoards(handleDatatableRender, tasks);\n            }\n        });\n    }\n    function handleTaskUpdateRequest() {\n        var parentEl = $(this).parents(\"[data-task-id]\");\n        var taskId = parentEl.attr(\"data-task-id\");\n        var taskTitle = parentEl.find(\"[data-task-name-input]\").val();\n        var taskContent = parentEl.find(\"[data-task-content-input]\").val();\n        var requestUrl = apiRoot;\n        $.ajax({\n            url: requestUrl,\n            method: \"PUT\",\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            data: JSON.stringify({\n                id: taskId,\n                title: taskTitle,\n                content: taskContent\n            }),\n            success: function(data) {\n                parentEl.attr(\"data-task-id\", data.id).toggleClass(\"datatable__row--editing\");\n                parentEl.find(\"[data-task-name-paragraph]\").text(taskTitle);\n                parentEl.find(\"[data-task-content-paragraph]\").text(taskContent);\n            }\n        });\n    }\n    function handleTaskDeleteRequest() {\n        var parentEl = $(this).parents(\"[data-task-id]\");\n        var taskId = parentEl.attr(\"data-task-id\");\n        var requestUrl = apiRoot;\n        $.ajax({\n            url: requestUrl + \"/\" + taskId,\n            method: \"DELETE\",\n            success: function() {\n                parentEl.slideUp(400, function() {\n                    parentEl.remove();\n                });\n            }\n        });\n    }\n    function handleTaskSubmitRequest(event) {\n        event.preventDefault();\n        var taskTitle = $(this).find('[name=\"title\"]').val();\n        var taskContent = $(this).find('[name=\"content\"]').val();\n        var requestUrl = apiRoot;\n        $.ajax({\n            url: requestUrl,\n            method: \"POST\",\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            data: JSON.stringify({\n                title: taskTitle,\n                content: taskContent\n            }),\n            complete: function(data) {\n                if (data.status === 200) getAllTasks();\n            }\n        });\n    }\n    function toggleEditingState() {\n        var parentEl = $(this).parents(\"[data-task-id]\");\n        parentEl.toggleClass(\"datatable__row--editing\");\n        var taskTitle = parentEl.find(\"[data-task-name-paragraph]\").text();\n        var taskContent = parentEl.find(\"[data-task-content-paragraph]\").text();\n        parentEl.find(\"[data-task-name-input]\").val(taskTitle);\n        parentEl.find(\"[data-task-content-input]\").val(taskContent);\n    }\n    function handleBoardNameSelect(event) {\n        var $changedSelectEl = $(event.target);\n        var selectedBoardId = $changedSelectEl.val();\n        var $listNameSelectEl = $changedSelectEl.siblings(\"[data-list-name-select]\");\n        var preparedListOptions = prepareBoardOrListSelectOptions(availableBoards[selectedBoardId].lists);\n        $listNameSelectEl.empty().append(preparedListOptions);\n    }\n    function handleCardCreationRequest(event) {\n        var requestUrl = trelloApiRoot + \"/cards\";\n        var $relatedTaskRow = $(event.target).parents(\"[data-task-id]\");\n        var relatedTaskId = $relatedTaskRow.attr(\"data-task-id\");\n        var relatedTask = availableTasks[relatedTaskId];\n        var selectedListId = $relatedTaskRow.find(\"[data-list-name-select]\").val();\n        if (!selectedListId) {\n            alert(\"You have to select a board and a list first!\");\n            return;\n        }\n        $.ajax({\n            url: requestUrl,\n            method: \"POST\",\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: \"json\",\n            data: JSON.stringify({\n                name: relatedTask.title,\n                description: relatedTask.content,\n                listId: selectedListId\n            }),\n            success: function(data) {\n                console.log(\"Card created - \" + data.shortUrl);\n                alert(\"Card created - \" + data.shortUrl);\n            }\n        });\n    }\n    $(\"[data-task-add-form]\").on(\"submit\", handleTaskSubmitRequest);\n    $tasksContainer.on(\"change\", \"[data-board-name-select]\", handleBoardNameSelect);\n    $tasksContainer.on(\"click\", \"[data-trello-card-creation-trigger]\", handleCardCreationRequest);\n    $tasksContainer.on(\"click\", \"[data-task-edit-button]\", toggleEditingState);\n    $tasksContainer.on(\"click\", \"[data-task-edit-abort-button]\", toggleEditingState);\n    $tasksContainer.on(\"click\", \"[data-task-submit-update-button]\", handleTaskUpdateRequest);\n    $tasksContainer.on(\"click\", \"[data-task-delete-button]\", handleTaskDeleteRequest);\n});\n\n//# sourceMappingURL=index.ea66097a.js.map\n","$(document).ready(function() {\n    const apiRoot = 'http://localhost:8080/v1/tasks';\n    const trelloApiRoot = 'http://localhost:8080/v1/trello';\n    const datatableRowTemplate = $('[data-datatable-row-template]').children()[0];\n    const $tasksContainer = $('[data-tasks-container]');\n\n    var availableBoards = {};\n    var availableTasks = {};\n\n    // init\n\n    getAllTasks();\n\n    function getAllAvailableBoards(callback, callbackArgs) {\n        var requestUrl = trelloApiRoot + '/boards';\n\n        $.ajax({\n            url: requestUrl,\n            method: 'GET',\n            contentType: 'application/json',\n            success: function(boards) { callback(callbackArgs, boards); }\n        });\n    }\n\n    function createElement(data) {\n        const element = $(datatableRowTemplate).clone();\n\n        element.attr('data-task-id', data.id);\n        element.find('[data-task-name-section] [data-task-name-paragraph]').text(data.title);\n        element.find('[data-task-name-section] [data-task-name-input]').val(data.title);\n\n        element.find('[data-task-content-section] [data-task-content-paragraph]').text(data.content);\n        element.find('[data-task-content-section] [data-task-content-input]').val(data.content);\n\n        return element;\n    }\n\n    function prepareBoardOrListSelectOptions(availableChoices) {\n        return availableChoices.map(function(choice) {\n            return $('<option>')\n                .addClass('crud-select__option')\n                .val(choice.id)\n                .text(choice.name || 'Unknown name');\n        });\n    }\n\n    function handleDatatableRender(taskData, boards) {\n        $tasksContainer.empty();\n        boards.forEach(board => {\n            availableBoards[board.id] = board;\n        });\n\n        taskData.forEach(function(task) {\n            var $datatableRowEl = createElement(task);\n            var $availableBoardsOptionElements = prepareBoardOrListSelectOptions(boards);\n\n            $datatableRowEl.find('[data-board-name-select]')\n                .append($availableBoardsOptionElements);\n\n            $datatableRowEl\n                .appendTo($tasksContainer);\n        });\n    }\n\n    function getAllTasks() {\n        const requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl,\n            method: 'GET',\n            contentType: \"application/json\",\n            success: function(tasks) {\n                tasks.forEach(task => {\n                    availableTasks[task.id] = task;\n                });\n\n                getAllAvailableBoards(handleDatatableRender, tasks);\n            }\n        });\n    }\n\n    function handleTaskUpdateRequest() {\n        var parentEl = $(this).parents('[data-task-id]');\n        var taskId = parentEl.attr('data-task-id');\n        var taskTitle = parentEl.find('[data-task-name-input]').val();\n        var taskContent = parentEl.find('[data-task-content-input]').val();\n        var requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl,\n            method: \"PUT\",\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: JSON.stringify({\n                id: taskId,\n                title: taskTitle,\n                content: taskContent\n            }),\n            success: function(data) {\n                parentEl.attr('data-task-id', data.id).toggleClass('datatable__row--editing');\n                parentEl.find('[data-task-name-paragraph]').text(taskTitle);\n                parentEl.find('[data-task-content-paragraph]').text(taskContent);\n            }\n        });\n    }\n\n    function handleTaskDeleteRequest() {\n        var parentEl = $(this).parents('[data-task-id]');\n        var taskId = parentEl.attr('data-task-id');\n        var requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl + '/' + taskId,\n            method: 'DELETE',\n            success: function() {\n                parentEl.slideUp(400, function() { parentEl.remove(); });\n            }\n        })\n    }\n\n    function handleTaskSubmitRequest(event) {\n        event.preventDefault();\n\n        var taskTitle = $(this).find('[name=\"title\"]').val();\n        var taskContent = $(this).find('[name=\"content\"]').val();\n\n        var requestUrl = apiRoot;\n\n        $.ajax({\n            url: requestUrl,\n            method: 'POST',\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: JSON.stringify({\n                title: taskTitle,\n                content: taskContent\n            }),\n            complete: function(data) {\n                if (data.status === 200) {\n                    getAllTasks();\n                }\n            }\n        });\n    }\n\n    function toggleEditingState() {\n        var parentEl = $(this).parents('[data-task-id]');\n        parentEl.toggleClass('datatable__row--editing');\n\n        var taskTitle = parentEl.find('[data-task-name-paragraph]').text();\n        var taskContent = parentEl.find('[data-task-content-paragraph]').text();\n\n        parentEl.find('[data-task-name-input]').val(taskTitle);\n        parentEl.find('[data-task-content-input]').val(taskContent);\n    }\n\n    function handleBoardNameSelect(event) {\n        var $changedSelectEl = $(event.target);\n        var selectedBoardId = $changedSelectEl.val();\n        var $listNameSelectEl = $changedSelectEl.siblings('[data-list-name-select]');\n        var preparedListOptions = prepareBoardOrListSelectOptions(availableBoards[selectedBoardId].lists);\n\n        $listNameSelectEl.empty().append(preparedListOptions);\n    }\n\n    function handleCardCreationRequest(event) {\n        var requestUrl = trelloApiRoot + '/cards';\n        var $relatedTaskRow = $(event.target).parents('[data-task-id]');\n        var relatedTaskId = $relatedTaskRow.attr('data-task-id');\n        var relatedTask = availableTasks[relatedTaskId];\n        var selectedListId = $relatedTaskRow.find('[data-list-name-select]').val();\n\n        if (!selectedListId) {\n            alert('You have to select a board and a list first!');\n            return;\n        }\n\n        $.ajax({\n            url: requestUrl,\n            method: 'POST',\n            processData: false,\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: JSON.stringify({\n                name: relatedTask.title,\n                description: relatedTask.content,\n                listId: selectedListId\n            }),\n            success: function(data) {\n                console.log('Card created - ' + data.shortUrl);\n                alert('Card created - ' + data.shortUrl);\n            }\n        });\n    }\n\n    $('[data-task-add-form]').on('submit', handleTaskSubmitRequest);\n\n    $tasksContainer.on('change','[data-board-name-select]', handleBoardNameSelect);\n    $tasksContainer.on('click','[data-trello-card-creation-trigger]', handleCardCreationRequest);\n    $tasksContainer.on('click','[data-task-edit-button]', toggleEditingState);\n    $tasksContainer.on('click','[data-task-edit-abort-button]', toggleEditingState);\n    $tasksContainer.on('click','[data-task-submit-update-button]', handleTaskUpdateRequest);\n    $tasksContainer.on('click','[data-task-delete-button]', handleTaskDeleteRequest);\n});"],"names":["$","document","ready","apiRoot","trelloApiRoot","datatableRowTemplate","children","$tasksContainer","availableBoards","availableTasks","prepareBoardOrListSelectOptions","availableChoices","map","choice","addClass","val","id","text","name","getAllTasks","ajax","url","method","contentType","success","tasks","forEach","task","boards","taskData","empty","board","$datatableRowEl","createElement","data","element","clone","attr","find","title","content","$availableBoardsOptionElements","append","appendTo","toggleEditingState","parentEl","parents","toggleClass","taskTitle","taskContent","on","event","preventDefault","processData","dataType","JSON","stringify","complete","status","$changedSelectEl","target","selectedBoardId","$listNameSelectEl","siblings","preparedListOptions","lists","$relatedTaskRow","relatedTask","selectedListId","alert","description","listId","console","log","shortUrl","taskId","requestUrl","slideUp","remove"],"version":3,"file":"index.ea66097a.js.map"}